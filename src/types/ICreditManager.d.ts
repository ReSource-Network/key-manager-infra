/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICreditManagerInterface extends ethers.utils.Interface {
  functions: {
    "calculatePercentInCollateral(address,uint256,uint256)": FunctionFragment;
    "convertNetworkToCollateral(address,uint256)": FunctionFragment;
    "createCreditLine(address,address,uint256,address)": FunctionFragment;
    "extendCreditLine(address,address,uint256)": FunctionFragment;
    "getCollateralToken()": FunctionFragment;
    "getCreditLine(address,address)": FunctionFragment;
    "getCreditLineUnderwriter(address,address)": FunctionFragment;
    "getMinLTV()": FunctionFragment;
    "getNeededCollateral(address,address)": FunctionFragment;
    "isCreditLineExpired(address,address)": FunctionFragment;
    "isPoolValidLTV(address,address)": FunctionFragment;
    "renewCreditLine(address,address)": FunctionFragment;
    "swapCreditLinePool(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePercentInCollateral",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertNetworkToCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCreditLine",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLine",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditLine",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditLineUnderwriter",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getMinLTV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNeededCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditLineExpired",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolValidLTV",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewCreditLine",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCreditLinePool",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePercentInCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertNetworkToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditLineUnderwriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMinLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNeededCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditLineExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolValidLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCreditLinePool",
    data: BytesLike
  ): Result;

  events: {
    "CreditLineCreated(address,address,address,uint256,uint256)": EventFragment;
    "CreditLineLimitUpdated(address,address,uint256)": EventFragment;
    "CreditLinePoolUpdated(address,address,address)": EventFragment;
    "CreditLineRemoved(address,address)": EventFragment;
    "CreditLineRenewed(address,address,uint256)": EventFragment;
    "CreditPoolAdded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreditLineCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLinePoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditLineRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditPoolAdded"): EventFragment;
}

export type CreditLineCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    network: string;
    networkMember: string;
    pool: string;
    creditLimit: BigNumber;
    timestamp: BigNumber;
  }
>;

export type CreditLineLimitUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    network: string;
    networkMember: string;
    creditLimit: BigNumber;
  }
>;

export type CreditLinePoolUpdatedEvent = TypedEvent<
  [string, string, string] & {
    network: string;
    networkMember: string;
    pool: string;
  }
>;

export type CreditLineRemovedEvent = TypedEvent<
  [string, string] & { network: string; networkMember: string }
>;

export type CreditLineRenewedEvent = TypedEvent<
  [string, string, BigNumber] & {
    network: string;
    networkMember: string;
    timestamp: BigNumber;
  }
>;

export type CreditPoolAddedEvent = TypedEvent<
  [string, string] & { pool: string; underwriter: string }
>;

export class ICreditManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICreditManagerInterface;

  functions: {
    calculatePercentInCollateral(
      _networkToken: string,
      _percent: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCreditLine(
      _networkMember: string,
      _pool: string,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendCreditLine(
      _network: string,
      _networkMember: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditLineUnderwriter(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNeededCollateral(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCreditLineExpired(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPoolValidLTV(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCreditLinePool(
      _network: string,
      _networkMember: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculatePercentInCollateral(
    _networkToken: string,
    _percent: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertNetworkToCollateral(
    _network: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCreditLine(
    _networkMember: string,
    _pool: string,
    _creditLimit: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendCreditLine(
    _network: string,
    _networkMember: string,
    _creditLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditLine(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditLineUnderwriter(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinLTV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNeededCollateral(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCreditLineExpired(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPoolValidLTV(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewCreditLine(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCreditLinePool(
    _network: string,
    _networkMember: string,
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculatePercentInCollateral(
      _networkToken: string,
      _percent: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCreditLine(
      _networkMember: string,
      _pool: string,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    extendCreditLine(
      _network: string,
      _networkMember: string,
      _creditLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralToken(overrides?: CallOverrides): Promise<string>;

    getCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        creditPool: string;
        issueDate: BigNumber;
        creditLimit: BigNumber;
      }
    >;

    getCreditLineUnderwriter(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMinLTV(overrides?: CallOverrides): Promise<BigNumber>;

    getNeededCollateral(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreditLineExpired(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolValidLTV(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renewCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCreditLinePool(
      _network: string,
      _networkMember: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreditLineCreated(address,address,address,uint256,uint256)"(
      network?: null,
      networkMember?: null,
      pool?: null,
      creditLimit?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        network: string;
        networkMember: string;
        pool: string;
        creditLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    CreditLineCreated(
      network?: null,
      networkMember?: null,
      pool?: null,
      creditLimit?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        network: string;
        networkMember: string;
        pool: string;
        creditLimit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "CreditLineLimitUpdated(address,address,uint256)"(
      network?: null,
      networkMember?: null,
      creditLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; networkMember: string; creditLimit: BigNumber }
    >;

    CreditLineLimitUpdated(
      network?: null,
      networkMember?: null,
      creditLimit?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; networkMember: string; creditLimit: BigNumber }
    >;

    "CreditLinePoolUpdated(address,address,address)"(
      network?: null,
      networkMember?: null,
      pool?: null
    ): TypedEventFilter<
      [string, string, string],
      { network: string; networkMember: string; pool: string }
    >;

    CreditLinePoolUpdated(
      network?: null,
      networkMember?: null,
      pool?: null
    ): TypedEventFilter<
      [string, string, string],
      { network: string; networkMember: string; pool: string }
    >;

    "CreditLineRemoved(address,address)"(
      network?: null,
      networkMember?: null
    ): TypedEventFilter<
      [string, string],
      { network: string; networkMember: string }
    >;

    CreditLineRemoved(
      network?: null,
      networkMember?: null
    ): TypedEventFilter<
      [string, string],
      { network: string; networkMember: string }
    >;

    "CreditLineRenewed(address,address,uint256)"(
      network?: null,
      networkMember?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; networkMember: string; timestamp: BigNumber }
    >;

    CreditLineRenewed(
      network?: null,
      networkMember?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; networkMember: string; timestamp: BigNumber }
    >;

    "CreditPoolAdded(address,address)"(
      pool?: null,
      underwriter?: null
    ): TypedEventFilter<
      [string, string],
      { pool: string; underwriter: string }
    >;

    CreditPoolAdded(
      pool?: null,
      underwriter?: null
    ): TypedEventFilter<
      [string, string],
      { pool: string; underwriter: string }
    >;
  };

  estimateGas: {
    calculatePercentInCollateral(
      _networkToken: string,
      _percent: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCreditLine(
      _networkMember: string,
      _pool: string,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendCreditLine(
      _network: string,
      _networkMember: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditLineUnderwriter(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNeededCollateral(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCreditLineExpired(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPoolValidLTV(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCreditLinePool(
      _network: string,
      _networkMember: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePercentInCollateral(
      _networkToken: string,
      _percent: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCreditLine(
      _networkMember: string,
      _pool: string,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendCreditLine(
      _network: string,
      _networkMember: string,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditLineUnderwriter(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNeededCollateral(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCreditLineExpired(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPoolValidLTV(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewCreditLine(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCreditLinePool(
      _network: string,
      _networkMember: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
