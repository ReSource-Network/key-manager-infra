/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INetworkFeeManagerInterface extends ethers.utils.Interface {
  functions: {
    "collectFees(address,uint256)": FunctionFragment;
    "setNetwork(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setNetwork", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNetwork", data: BytesLike): Result;

  events: {
    "AmbassadorRewardsUpdated(address,uint256)": EventFragment;
    "FeesCollected(address,uint256)": EventFragment;
    "NetworkRewardsUpdated(uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmbassadorRewardsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkRewardsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
}

export type AmbassadorRewardsUpdatedEvent = TypedEvent<
  [string, BigNumber] & { ambassador: string; totalRewards: BigNumber }
>;

export type FeesCollectedEvent = TypedEvent<
  [string, BigNumber] & { member: string; totalFee: BigNumber }
>;

export type NetworkRewardsUpdatedEvent = TypedEvent<
  [BigNumber] & { totalRewards: BigNumber }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber] & { claimer: string; totalRewards: BigNumber }
>;

export class INetworkFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INetworkFeeManagerInterface;

  functions: {
    collectFees(
      _member: string,
      _transactionValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNetwork(
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectFees(
    _member: string,
    _transactionValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNetwork(
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectFees(
      _member: string,
      _transactionValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNetwork(_network: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AmbassadorRewardsUpdated(address,uint256)"(
      ambassador?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; totalRewards: BigNumber }
    >;

    AmbassadorRewardsUpdated(
      ambassador?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; totalRewards: BigNumber }
    >;

    "FeesCollected(address,uint256)"(
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; totalFee: BigNumber }
    >;

    FeesCollected(
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; totalFee: BigNumber }
    >;

    "NetworkRewardsUpdated(uint256)"(
      totalRewards?: null
    ): TypedEventFilter<[BigNumber], { totalRewards: BigNumber }>;

    NetworkRewardsUpdated(
      totalRewards?: null
    ): TypedEventFilter<[BigNumber], { totalRewards: BigNumber }>;

    "RewardsClaimed(address,uint256)"(
      claimer?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { claimer: string; totalRewards: BigNumber }
    >;

    RewardsClaimed(
      claimer?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { claimer: string; totalRewards: BigNumber }
    >;
  };

  estimateGas: {
    collectFees(
      _member: string,
      _transactionValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNetwork(
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectFees(
      _member: string,
      _transactionValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNetwork(
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
