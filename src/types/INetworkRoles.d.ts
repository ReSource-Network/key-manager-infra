/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INetworkRolesInterface extends ethers.utils.Interface {
  functions: {
    "getMembershipAmbassador(address)": FunctionFragment;
    "isAmbassador(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "isNetworkOperator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMembershipAmbassador",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAmbassador",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isNetworkOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMembershipAmbassador",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAmbassador",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkOperator",
    data: BytesLike
  ): Result;

  events: {
    "AmbassadorAdded(address,uint256)": EventFragment;
    "AmbassadorAllowanceUpdated(address,uint256)": EventFragment;
    "AmbassadorRemoved(address)": EventFragment;
    "MemberAdded(address,address)": EventFragment;
    "MembershipAmbassadorUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmbassadorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmbassadorAllowanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmbassadorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipAmbassadorUpdated"
  ): EventFragment;
}

export type AmbassadorAddedEvent = TypedEvent<
  [string, BigNumber] & { ambassador: string; creditAllowance: BigNumber }
>;

export type AmbassadorAllowanceUpdatedEvent = TypedEvent<
  [string, BigNumber] & { ambassador: string; creditAllowance: BigNumber }
>;

export type AmbassadorRemovedEvent = TypedEvent<
  [string] & { ambassador: string }
>;

export type MemberAddedEvent = TypedEvent<
  [string, string] & { member: string; ambassador: string }
>;

export type MembershipAmbassadorUpdatedEvent = TypedEvent<
  [string, string] & { member: string; ambassador: string }
>;

export class INetworkRoles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INetworkRolesInterface;

  functions: {
    getMembershipAmbassador(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    isNetworkOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getMembershipAmbassador(
    _member: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isAmbassador(
    _ambassador: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(_member: string, overrides?: CallOverrides): Promise<boolean>;

  isNetworkOperator(
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getMembershipAmbassador(
      _member: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(_member: string, overrides?: CallOverrides): Promise<boolean>;

    isNetworkOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AmbassadorAdded(address,uint256)"(
      ambassador?: null,
      creditAllowance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; creditAllowance: BigNumber }
    >;

    AmbassadorAdded(
      ambassador?: null,
      creditAllowance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; creditAllowance: BigNumber }
    >;

    "AmbassadorAllowanceUpdated(address,uint256)"(
      ambassador?: null,
      creditAllowance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; creditAllowance: BigNumber }
    >;

    AmbassadorAllowanceUpdated(
      ambassador?: null,
      creditAllowance?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { ambassador: string; creditAllowance: BigNumber }
    >;

    "AmbassadorRemoved(address)"(
      ambassador?: null
    ): TypedEventFilter<[string], { ambassador: string }>;

    AmbassadorRemoved(
      ambassador?: null
    ): TypedEventFilter<[string], { ambassador: string }>;

    "MemberAdded(address,address)"(
      member?: null,
      ambassador?: null
    ): TypedEventFilter<
      [string, string],
      { member: string; ambassador: string }
    >;

    MemberAdded(
      member?: null,
      ambassador?: null
    ): TypedEventFilter<
      [string, string],
      { member: string; ambassador: string }
    >;

    "MembershipAmbassadorUpdated(address,address)"(
      member?: null,
      ambassador?: null
    ): TypedEventFilter<
      [string, string],
      { member: string; ambassador: string }
    >;

    MembershipAmbassadorUpdated(
      member?: null,
      ambassador?: null
    ): TypedEventFilter<
      [string, string],
      { member: string; ambassador: string }
    >;
  };

  estimateGas: {
    getMembershipAmbassador(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    isNetworkOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMembershipAmbassador(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNetworkOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
