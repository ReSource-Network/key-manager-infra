/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CreditFeeManagerInterface extends ethers.utils.Interface {
  functions: {
    "calculateFees(address,uint256)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "collectFees(address,address,uint256)": FunctionFragment;
    "creditManager()": FunctionFragment;
    "creditRequest()": FunctionFragment;
    "creditRoles()": FunctionFragment;
    "distributeFees(address,address[])": FunctionFragment;
    "getAccruedFees(address[],address)": FunctionFragment;
    "getCollateralToken()": FunctionFragment;
    "getUnderwriterPoolStakePercent(address,address)": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underwriterFeePercent()": FunctionFragment;
    "updateUnderwriterFeePercent(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedFees",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderwriterPoolStakePercent",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underwriterFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnderwriterFeePercent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderwriterPoolStakePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underwriterFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnderwriterFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "FeesCollected(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolRewardsUpdated(address,uint256)": EventFragment;
    "UnderwriterRewardsStaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRewardsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderwriterRewardsStaked"): EventFragment;
}

export type FeesCollectedEvent = TypedEvent<
  [string, string, BigNumber] & {
    network: string;
    member: string;
    totalFee: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PoolRewardsUpdatedEvent = TypedEvent<
  [string, BigNumber] & { underwriter: string; totalRewards: BigNumber }
>;

export type UnderwriterRewardsStakedEvent = TypedEvent<
  [string, BigNumber] & { underwriter: string; totalStaked: BigNumber }
>;

export class CreditFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreditFeeManagerInterface;

  functions: {
    calculateFees(
      _network: string,
      _transactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { creditFee: BigNumber }>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    collectFees(
      _network: string,
      _networkMember: string,
      _transactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    creditRequest(overrides?: CallOverrides): Promise<[string]>;

    creditRoles(overrides?: CallOverrides): Promise<[string]>;

    distributeFees(
      _network: string,
      _networkMembers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccruedFees(
      _members: string[],
      _network: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalFees: BigNumber }>;

    getCollateralToken(overrides?: CallOverrides): Promise<[string]>;

    getUnderwriterPoolStakePercent(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _creditManager: string,
      _creditRoles: string,
      _creditRequest: string,
      _underwriterPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underwriterFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateUnderwriterFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFees(
    _network: string,
    _transactionAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  collectFees(
    _network: string,
    _networkMember: string,
    _transactionAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  creditRequest(overrides?: CallOverrides): Promise<string>;

  creditRoles(overrides?: CallOverrides): Promise<string>;

  distributeFees(
    _network: string,
    _networkMembers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccruedFees(
    _members: string[],
    _network: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralToken(overrides?: CallOverrides): Promise<string>;

  getUnderwriterPoolStakePercent(
    _network: string,
    _networkMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _creditManager: string,
    _creditRoles: string,
    _creditRequest: string,
    _underwriterPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underwriterFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  updateUnderwriterFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFees(
      _network: string,
      _transactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    collectFees(
      _network: string,
      _networkMember: string,
      _transactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    creditRequest(overrides?: CallOverrides): Promise<string>;

    creditRoles(overrides?: CallOverrides): Promise<string>;

    distributeFees(
      _network: string,
      _networkMembers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccruedFees(
      _members: string[],
      _network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralToken(overrides?: CallOverrides): Promise<string>;

    getUnderwriterPoolStakePercent(
      _network: string,
      _networkMember: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _creditManager: string,
      _creditRoles: string,
      _creditRequest: string,
      _underwriterPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underwriterFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnderwriterFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeesCollected(address,address,uint256)"(
      network?: null,
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; member: string; totalFee: BigNumber }
    >;

    FeesCollected(
      network?: null,
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { network: string; member: string; totalFee: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PoolRewardsUpdated(address,uint256)"(
      underwriter?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underwriter: string; totalRewards: BigNumber }
    >;

    PoolRewardsUpdated(
      underwriter?: null,
      totalRewards?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underwriter: string; totalRewards: BigNumber }
    >;

    "UnderwriterRewardsStaked(address,uint256)"(
      underwriter?: null,
      totalStaked?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underwriter: string; totalStaked: BigNumber }
    >;

    UnderwriterRewardsStaked(
      underwriter?: null,
      totalStaked?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underwriter: string; totalStaked: BigNumber }
    >;
  };

  estimateGas: {
    calculateFees(
      _network: string,
      _transactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectFees(
      _network: string,
      _networkMember: string,
      _transactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    creditRequest(overrides?: CallOverrides): Promise<BigNumber>;

    creditRoles(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFees(
      _network: string,
      _networkMembers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccruedFees(
      _members: string[],
      _network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderwriterPoolStakePercent(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _creditManager: string,
      _creditRoles: string,
      _creditRequest: string,
      _underwriterPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underwriterFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnderwriterFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFees(
      _network: string,
      _transactionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFees(
      _network: string,
      _networkMember: string,
      _transactionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeFees(
      _network: string,
      _networkMembers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccruedFees(
      _members: string[],
      _network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderwriterPoolStakePercent(
      _network: string,
      _networkMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _creditManager: string,
      _creditRoles: string,
      _creditRequest: string,
      _underwriterPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underwriterFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateUnderwriterFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
